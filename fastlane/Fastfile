require 'json'
require 'erb'

class Coverage
  attr_accessor :covered_lines, :executable_lines

  def initialize(covered_lines, executable_lines)
    @covered_lines = covered_lines
    @executable_lines = executable_lines
  end

  def coverage
    (covered_lines.to_f / executable_lines) * 100
  end
end

class FileCoverage < Coverage
  attr_accessor :file_name

  def initialize(file_name, covered_lines, executable_lines)
    super(covered_lines, executable_lines)
    @file_name = file_name
  end
end

class TotalCoverage
  attr_accessor :total_coverage, :file_coverages

  def initialize(total_coverage, file_coverages)
    @total_coverage = total_coverage
    @file_coverages = file_coverages
  end
end

def create_file_coverages(json_report, ignore_patterns)
  report = JSON.parse(json_report)
  report['targets'].map do |target|
    target['files'].filter_map do |file|
      name = file['name']
      if ignore_patterns.all? { |pattern| pattern.match(name).nil? }
        FileCoverage.new(name, file['coveredLines'], file['executableLines'])
      else
        nil
      end
    end
  end.flatten
end

def create_total_coverages(file_coverages)
  total_coverage = file_coverages.reduce(Coverage.new(0, 0)) { |acc, coverage|
    acc.covered_lines += coverage.covered_lines
    acc.executable_lines += coverage.executable_lines
    acc
  }
  TotalCoverage.new(total_coverage, file_coverages)
end

def create_html_coverage_report(coverage)
  template = ERB.new(File.read('coverage_report.html.erb'))
  File.open('coverage_report.html', 'w') do |f|
    f.puts template.result(binding)
  end
end

default_platform(:ios)

platform :ios do
  desc 'Set environment'
  lane :set_environment do
    set_info_plist_value(path: 'AppFeature/Sources/App/Resource/Environment.plist', key: 'api_base_url', value: ENV['API_BASE_URL'])
  end

  desc 'Unit Tests'
  lane :tests do
    set_environment
    scan(
      package_path: 'AppFeature',
      scheme: 'AppFeature',
      device: 'iPhone 14',
      code_coverage: true,
      parallel_testing: false,
      result_bundle: true,
      output_directory: Dir.pwd + "/test_output"
    )
  end

  desc 'Deploy to Test Flight'
  lane :deploy_to_test_flight do
    api_key = app_store_connect_api_key(
      key_id: ENV['ASC_KEY_ID'],
      issuer_id: ENV['ASC_ISSUER_ID'],
      key_content: ENV['ASC_API_KEY']
    )

    build_number = app_store_build_number(
      api_key: api_key,
      app_identifier: 'com.yukimaterrace.ios.melaka',
      version: get_version_number(target: 'Melaka'),
      initial_build_number: 0,
      live: false
    )
    increment_build_number(build_number: build_number + 1)

    set_environment
    build_app(
      scheme: 'Melaka',
      export_method: 'app-store',
      xcargs: '-skipPackagePluginValidation'
    )

    upload_to_testflight(api_key: api_key)
  end

  desc 'Create coverage json report'
  lane :create_coverage_json_report do
    report = sh('xcrun xccov view --report test_output/AppFeature.xcresult --json')
    report.sub(/.*?\n/, '')
  end

  desc 'Create coverage html report'
  lane :create_coverage_html_report do
    ignore_patterns = [
      /.*Tests\.swift/,
      /Mock.*\.swift/,
      /.*View\.swift/,
      /View\+.*\.swift/,
      /.*\+Generated\.swift/,
      /AppDelegate\.swift/,
      /ViewFactory\.swift/,
      /DIContainer\.swift/,
      /Font\+Custom\.swift/,
      /EnvironmentService\.swift/,
      /NetworkService\.swift/
    ]

    file_coverages = create_file_coverages(create_coverage_json_report, ignore_patterns)
    total_coverage = create_total_coverages(file_coverages)
    create_html_coverage_report(total_coverage)
  end
end
